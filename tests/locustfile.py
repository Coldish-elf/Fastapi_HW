from locust import HttpUser, task, between
import random

class FastAPIUser(HttpUser):
    wait_time = between(1, 3)  
    host = "http://localhost:8000"  
    auth_token = None
    user_credentials = {
        "username": f"locustuser_{random.randint(1000, 9999)}",
        "password": "locustpassword"
    }

    def on_start(self):
        """Called when a Locust start before any task is scheduled."""
        self.client.post("/users", json=self.user_credentials)
        
        response = self.client.post("/token", data=self.user_credentials)
        if response.status_code == 200:
            self.auth_token = response.json().get("access_token")
        else:
            print(f"Failed to login user {self.user_credentials['username']}: {response.status_code} {response.text}")
            self.auth_token = None 

    @task(10)
    def get_tasks(self):
        if not self.auth_token:
            return
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        params = {}
        if random.random() < 0.3: 
            params["sort_by"] = random.choice(["title", "status", "created_at", "priority"])
        if random.random() < 0.2:
            params["search"] = random.choice(["task", "test", "important", "api"])
        if random.random() < 0.1:
            params["top"] = random.randint(1, 10)
            
        self.client.get("/tasks", headers=headers, params=params, name="/tasks (get)")

    @task(3)
    def create_task(self):
        if not self.auth_token:
            return

        headers = {"Authorization": f"Bearer {self.auth_token}"}
        task_data = {
            "title": f"Locust Task {random.randint(1, 1000)}",
            "description": "Generated by Locust",
            "status": random.choice(["в ожидании", "в работе", "завершено"]),
            "priority": random.randint(1, 10)
        }
        self.client.post("/tasks", headers=headers, json=task_data, name="/tasks (post)")

    @task(1) 
    def update_or_delete_task(self):
        if not self.auth_token:
            return
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        response = self.client.get("/tasks", headers=headers, name="/tasks (get for update/delete)")
        if response.status_code == 200 and response.json():
            tasks = response.json()
            task_to_modify = random.choice(tasks)
            task_id = task_to_modify["id"]

            if random.random() < 0.7: 
                update_data = {
                    "title": f"Updated Locust Task {task_id}",
                    "description": "Updated by Locust",
                    "status": random.choice(["в ожидании", "в работе", "завершено"]),
                    "priority": random.randint(1, 10)
                }
                self.client.put(f"/tasks/{task_id}", headers=headers, json=update_data, name="/tasks/{id} (put)")
            else: 
                self.client.delete(f"/tasks/{task_id}", headers=headers, name="/tasks/{id} (delete)")
